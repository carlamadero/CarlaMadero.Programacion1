// COMPARACION ARRAYS

int[] numbersOne = {1, 2, 3};
int[] valuesTwo = {1, 2, 3};
System.out.println(Arrays.equals(numbersOne, valuesTwo));

// LENGTH

int[] nums = new int[5];
int arraySize = nums.length;
String text = "Hello";
int stringSize = text.length();

// CORRECTA INICIALIZACION

int[] nums = new int[5];

// MATRICES VACIAS

    if (matriz == null) 
        System.out.println("La matriz es nula");

    if (matriz.length == 0) 
        System.out.println("La matriz está vacía");



//METOS DE CLASE ARRAYS
//HAY QUE IMPORTAR

java.until.Arrays


//PERMITE OBTENER UNA REPRESENTACION EN STRING DEL CONTENIDO DE LA MATRIZ (VISUALIZAR //MATRICES)

int[] numeros = {1, 2, 3, 4, 5};
System.out.println(Arrays.toString(numeros));

// ORDENA LOS ELEMENTOS DE LA MATRIZ (DE MENOR A MAYOR EN TIPOS PRIMITIVOS

int[] desordenados = {5, 2, 8, 1, 9};
Arrays.sort(desordenados);

// CREA UNA NUEVA MATRIZ CON UNA COPIA DE ELEMENTOS

int[] original = {1, 2, 3, 4, 5};
int[] copia = Arrays.copyOf(original, original.length);

// RELLENA TODA UNA MATRIZ CON UN VALOR ESPECIFICO

int[] matriz = new int[5];
Arrays.fill(matriz, 10);

// BUSCA UN ELEMENTO EN UNA MATRIZ ORDENADA

int[] numeros = {1, 2, 3, 4, 5};
int posicion = Arrays.binarySearch(numeros, 3);

// SIMILAR A toString() PERO PARA MATRICES DE MAS DE UNA DIMENSION

int[][] matriz2D = {{1, 2}, {3, 4}};
System.out.println(Arrays.deepToString(matriz2D));